name: Everything CI/CD

on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy-back-end:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Setup Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
    - name: deploy
      run: |
        scp -r -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" back-end ec2-user@ec2-13-247-176-10.af-south-1.compute.amazonaws.com:~/
        ssh -o StrictHostKeyChecking=no -i "~/.ssh/id_rsa" ec2-user@ec2-13-247-176-10.af-south-1.compute.amazonaws.com "cd back-end; npm i; npm run build; npm stop; npm start"
    
  deploy-front-end:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: af-south-1
      - name: Install Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '22'
      - name: Install dependencies
        run: |
          cd front-end2
          npm i
          npx tsc
      - name: Sync files to S3 bucket
        run: |
          cd front-end2
          ls
          aws s3 sync . s3://spellit --delete
  
  db-migrations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      # - name: Migrate Tables
      #   uses: yakubique/postgresql-apply-migrations@v1.1
      #   with:
      #     migrations: './db/migrations'
      #     host: ${{ vars.PG_HOST }}
      #     username: ${{ vars.PG_USER }}
      #     password: ${{ secrets.PG_PWD }}
      #     ssl: 'false'
      
      # - name: Migrate Data
      #   uses: yakubique/postgresql-apply-migrations@v1.1
      #   with:
      #     migrations: './db/data'
      #     host: ${{ vars.PG_HOST }}
      #     username: ${{ vars.PG_USER }}
      #     password: ${{ secrets.PG_PWD }}
      #     ssl: 'false'

      - name: Run Flyway Migrations
        run: |
          docker run --rm redgate/flyway -url="jdbc:postgresql://${{vars.PG_HOST}}:5432/postgres" -user="${{ vars.PG_USER }}" -password="${{ secrets.PG_PWD }}" repair
          docker run --rm --volume ${{ github.workspace }}/db/migrations:/flyway/sql:ro redgate/flyway -url="jdbc:postgresql://${{vars.PG_HOST}}:5432/postgres" -user="${{ vars.PG_USER }}" -password="${{ secrets.PG_PWD }}" migrate
          docker run --rm --volume ${{ github.workspace }}/db/data:/flyway/sql:ro redgate/flyway -url="jdbc:postgresql://${{vars.PG_HOST}}:5432/postgres" -user="${{ vars.PG_USER }}" -password="${{ secrets.PG_PWD }}" migrate